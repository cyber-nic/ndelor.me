<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ndelor.me</title>
    <link>https://ndelor.me/posts/</link>
    <description>Recent content in Posts on ndelor.me</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 16 Jan 2025 09:46:58 +0000</lastBuildDate><atom:link href="https://ndelor.me/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Capturing WebSocket Traffic with Mitmproxy</title>
      <link>https://ndelor.me/posts/mitmproxy-node/</link>
      <pubDate>Wed, 18 Dec 2024 20:13:21 +0000</pubDate>
      
      <guid>https://ndelor.me/posts/mitmproxy-node/</guid>
      
      <description>Recently I wanted to reverse engineer an application that uses websockets to communicate with with its server. I wanted to see the data that was being sent and received. I used mitmproxy to intercept the traffic and view it in plain text.
WebSocket traffic operates over TCP, initially using HTTP for handshake (usually port 80 for unencrypted or 443 for encrypted connections). After the handshake, it establishes a persistent, full-duplex communication channel over the same TCP connection.</description>
      
    </item>
    
    <item>
      <title>Terraform Project Structures: Organizing Infrastructure as Code</title>
      <link>https://ndelor.me/posts/terraform-project-structures/</link>
      <pubDate>Wed, 07 Aug 2024 10:22:09 +0100</pubDate>
      
      <guid>https://ndelor.me/posts/terraform-project-structures/</guid>
      
      <description>Table of Contents Managing Security and Cost: Accounts as Environments Managing Performance and Risk: Layers and Overlays Managing Code: Repos. Folders, and Pipelines Dedicated Repo for Account and IaC Service Account Setup Application Specific Service Accounts Managing Releases: Applications as Modules Integrated Deployment Structure Dedicated Deployment Structure Isolated Deployment Structure Managing Environments: Using Terraform Workspaces vs Dedicated Folders Terraform Workspaces Dedicated Folders Summary This article delves into the complexities and best practices of structuring Terraform projects, focusing on optimizing infrastructure as code for security, cost management, and performance.</description>
      
    </item>
    
    <item>
      <title>GCP Instance with NVIDIA Tesla T4</title>
      <link>https://ndelor.me/posts/gcp-gpu-instance/</link>
      <pubDate>Fri, 12 Jan 2024 09:11:12 +0000</pubDate>
      
      <guid>https://ndelor.me/posts/gcp-gpu-instance/</guid>
      
      <description>Context Many interesting projects now require a modern GPU (or M1, but I&amp;rsquo;m not desperate enough to downgrade from Linux to OSX). Below are notes on how to spin up a VM instance with GPU in GCP and run a basic PyTorch workload. I chose Watermark-Removal-Pytorch.
Cost/Performance After studying the available GPU configurations as well as [VM instance pricing][https://cloud.google.com/compute/vm-instance-pricing] I determined that the most affordable Accelerator optimized configuration (~$250/month) is the N1 + nvidia-tesla-t4 (I operated in the europe-west1 region).</description>
      
    </item>
    
    <item>
      <title>Next Thoughts</title>
      <link>https://ndelor.me/posts/next-thoughts/</link>
      <pubDate>Thu, 23 Nov 2023 16:03:34 +0000</pubDate>
      
      <guid>https://ndelor.me/posts/next-thoughts/</guid>
      
      <description>In 2022, I launched www.4ks.io, a recipe editing and forking website. I used React and ViteJS v2 for the front-end and was really impressed with its performance, particularly its quick Time to Interactive (TTI) metrics.
Recently, I began exploring NextJS, initially with version 13 and then upgrading to Next 14, to integrate server-side rendering (SSR) for better SEO and providing better i18n tooling. The performance with NextJS was on par with ViteJS, but I ran into some challenges, such as duplicate API calls during SSR.</description>
      
    </item>
    
    <item>
      <title>Dev K8s Options</title>
      <link>https://ndelor.me/posts/dev-k8s-options/</link>
      <pubDate>Thu, 02 Nov 2023 06:33:25 +0100</pubDate>
      
      <guid>https://ndelor.me/posts/dev-k8s-options/</guid>
      
      <description>Minikube, KinD (Kubernetes in Docker), and k3d (K3s in Docker) are all tools for running Kubernetes clusters locally, primarily for development purposes. My personal experience with all 3 has been very positive.
For the last couple of years I&amp;rsquo;ve been operating on Fedora linux and have been keeping up with the latest releases. Originally I used minikube, but switched over to k3d whe DNS issues prevented it from reaching docker hub.</description>
      
    </item>
    
    <item>
      <title>Cloud Load Balancer Cost Savings</title>
      <link>https://ndelor.me/posts/cloud-lb-cost-savings/</link>
      <pubDate>Fri, 20 Oct 2023 10:45:42 +0100</pubDate>
      
      <guid>https://ndelor.me/posts/cloud-lb-cost-savings/</guid>
      
      <description>Context In an effort to learn more about the Google Cloud Platform, I built and deployed a website using Cloud Run functions, hosted behind a GCP Load Balancer. The performance was great. Even without conducting any performance or benchmark tests, I observed that the website was very responsive globally, as relayed by a family member in Singapore.
Unfortunately, the costs were not as favorable. The cost of running a single load balancer was about ~$25 per month.</description>
      
    </item>
    
    <item>
      <title>Gorm UUID Many to Many</title>
      <link>https://ndelor.me/posts/gorm-uuid-many-to-many/</link>
      <pubDate>Thu, 05 Oct 2023 13:45:40 +0100</pubDate>
      
      <guid>https://ndelor.me/posts/gorm-uuid-many-to-many/</guid>
      
      <description>Hasham Ali&amp;rsquo;s How to Use UUID Key Type with Gorm article was terrific for suggesting how to handle using UUID as the ID in gorm. It took a little more fiddling to be able to use the keys in a many-to-many relationship. In the end, it worked by having to explicitly define the join table and the foreign key constraints. Sample code is below.
import ( &amp;#34;time&amp;#34; &amp;#34;github.com/google/uuid&amp;#34; &amp;#34;gorm.io/gorm&amp;#34; ) // BaseAttributes contains common columns for all tables.</description>
      
    </item>
    
    <item>
      <title>Go Runtime Frames</title>
      <link>https://ndelor.me/posts/go-runtime-frame/</link>
      <pubDate>Sat, 16 Sep 2023 09:25:51 +0100</pubDate>
      
      <guid>https://ndelor.me/posts/go-runtime-frame/</guid>
      
      <description>Both the go-kit/log and rs/zerolog loggers provide a Caller method that returns the caller of the function that called it. This is useful for logging the function name in the log output. This functionality is immensly useful and roused my curiosity as to how it is implemented.
zerolog logger caller example
import &amp;#34;github.com/rs/zerolog&amp;#34; import &amp;#34;github.com/rs/zerolog/log&amp;#34; func main() { log.Logger = log.With().Caller().Logger() // &amp;lt;-- log.Debug().Str(&amp;#34;foo&amp;#34;, &amp;#34;bar&amp;#34;).Msg(&amp;#34;This will be logged with a caller&amp;#34;) } go-kit logger caller example</description>
      
    </item>
    
    <item>
      <title>History AI - Image Duplicates and Distribtion</title>
      <link>https://ndelor.me/posts/hai-img-distribution/</link>
      <pubDate>Tue, 05 Sep 2023 11:16:03 +0100</pubDate>
      
      <guid>https://ndelor.me/posts/hai-img-distribution/</guid>
      
      <description>Scraping Results This table shows some metadata about the images scraped.
Prefix Size (GB) Images Distinct Images Duplicate Images Duplicate Images % A 12 71077 48126 22951 32.3% B 456 1672477 1667500 4977 0.3% C 48 290248 278891 11357 3.9% D 29 122001 121977 24 0.0% E 29 212701 209391 3310 1.6% F 5 40301 40301 0 0.0% G 0.04 216 215 1 0.5% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;- &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;- &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;- Total 579 2409021 2366401 42620 0 The scraping process resulted in 2.</description>
      
    </item>
    
    <item>
      <title>CockroachDB Local</title>
      <link>https://ndelor.me/posts/cockroachdb-local/</link>
      <pubDate>Sun, 03 Sep 2023 07:12:05 +0100</pubDate>
      
      <guid>https://ndelor.me/posts/cockroachdb-local/</guid>
      
      <description>update 2024-01-11 While not central to this article the use of the CRC32 hash in the code below is noticeable. Since writing this article I learned that the CRC32, particularly the CRC32C variant used by Google Cloud Storage (GCS), is optimized for error detection, not as a unique identifier for data. It has a higher probability of collisions (1 in 4.3 billion) compared to more robust algorithms. To overcome these limitations, SHA-256, a more robust hashing algorithm, is recommended.</description>
      
    </item>
    
    <item>
      <title>History AI - Part IV: Computer Vision</title>
      <link>https://ndelor.me/posts/hai-computer-vision/</link>
      <pubDate>Tue, 11 Jul 2023 17:33:59 -0400</pubDate>
      
      <guid>https://ndelor.me/posts/hai-computer-vision/</guid>
      
      <description>I have 2,000,000 images which all containt a watermark pattern. This post will explore options for removing the watermarks in order to improve the quality of the OCR operations to follow.
1) Skipping Watermark Removal The cheapest option in terms of time and resources is to skip watermark removal altogether. This can be done by filtering out the known watermark text from the OCR results. This is the best short-term solution, as it is relatively easy to implement and does not require any additional software.</description>
      
    </item>
    
    <item>
      <title>History AI - Part III: Scraping</title>
      <link>https://ndelor.me/posts/hai-scraping/</link>
      <pubDate>Mon, 10 Jul 2023 22:09:00 +0000</pubDate>
      
      <guid>https://ndelor.me/posts/hai-scraping/</guid>
      
      <description>Target The target site is completely free and public. While the site&amp;rsquo;s performance is sufficient it unfortunately isn&amp;rsquo;t well maintained: SSL cert is expired. Luckily the sought after information is available directly via REST calls. No html parsing necessary.
Process The scraping process was performed on a Cloud Compute, Regular Performance, $5/month VM on Vultr.com. The attached 120GB block storage was quickly expanded to 500GB, which increased the cost from $3.</description>
      
    </item>
    
    <item>
      <title>History AI - Part I: AI Making History</title>
      <link>https://ndelor.me/posts/ai-making-history/</link>
      <pubDate>Mon, 10 Jul 2023 08:58:00 +0000</pubDate>
      
      <guid>https://ndelor.me/posts/ai-making-history/</guid>
      
      <description>In the summer of 2023, I embarked on an ambitious journey to collect an extensive archive of historical images, totaling close to 2 million, from a public online repository. These captivating images capture typed or handwritten accounts of war experiences, predominantly in a single non-English language, although they encompass various other languages as well.
While I won&amp;rsquo;t disclose the name of the archive or share any documents here, I may provide some information in the future.</description>
      
    </item>
    
    <item>
      <title>History AI - Part II: System Design</title>
      <link>https://ndelor.me/posts/hai-system-breakdown/</link>
      <pubDate>Mon, 10 Jul 2023 01:26:00 +0000</pubDate>
      
      <guid>https://ndelor.me/posts/hai-system-breakdown/</guid>
      
      <description>Assumptions / Constraints We will operate on a dataset of ~2,000,000 jpeg images / ~500GB The initial budget is $1000. It is expected that this will increase, but the goal is to re-evaluate the budget prior to spending. We will operate using the Google Cloud Platform (GCP) but might explore other cloud offerings when performance or cost become a concern System Design Scraping I&amp;rsquo;ve implemented scrapers using various languages including PowerShell, Node.</description>
      
    </item>
    
  </channel>
</rss>
